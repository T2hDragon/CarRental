# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: ar|en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN|bg|tr|lt|bs|sr_Cyrl|sr_Latn
    app.notifications.email_sender: anonymous@example.com

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            string $locales: '%app_locales%'
            string $defaultLocale: '%locale%'
            string $emailSender: '%app.notifications.email_sender%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # when the service definition only contains arguments, you can omit the
    # 'arguments' key and define the arguments just below the service class
    App\EventSubscriber\CommentNotificationSubscriber:
        $sender: '%app.notifications.email_sender%'

    Symfony\Component\Security\Http\Logout\LogoutUrlGenerator: '@security.logout_url_generator'
    
    
    App\Framework\Database\Persistence\DoctrinePersistence:
        arguments:
            $committers: !tagged 'app.commit_after_transaction'

    App\Framework\Database\Persistence\PersistenceInterface: '@App\Framework\Database\DoctrinePersistence'

    app.doctrine.pre_persist_listener:
        class: App\Framework\EventListener\EntityHandling\DoctrinePrePersistListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    app.doctrine.pre_update_listener:
        class: App\Framework\EventListener\EntityHandling\DoctrinePreUpdateListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate }

when@test:
    services:
        test.user_password_hasher:
            alias: 'security.user_password_hasher'
            public: true
